package logger

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

// Creates a new logger with the given configuration
func TestNewLoggerWithGivenConfiguration(t *testing.T) {
	config := NewlogConfigOptions(false)
	logger := NewLogger(config)
	assert.NotNil(t, logger)
}

/*// Uses a JSON encoder for encoding logs
func TestNewLoggerUsesJSONEncoder(t *testing.T) {
	config := NewlogConfigOptions(false)
	logger := NewLogger(config)
	assert.NotNil(t, logger)
	assert.IsType(t, zapcore.JSONEncoder{}, logger.log.Core().Encoder)
}


// Uses a write syncer generated by genarateLogRotater function
func TestNewLoggerUsesWriteSyncerGeneratedByGenarateLogRotater(t *testing.T) {
	config := &mockConfig{}
	logger := NewLogger(config)
	assert.NotNil(t, logger)
	assert.IsType(t, (*lumberjack.Logger)(nil), logger.log.Core().WriteSyncer)
}

// Empty configuration object returns a logger with default values
func TestNewLoggerWithEmptyConfiguration(t *testing.T) {
	config := &mockConfig{}
	logger := NewLogger(config)
	assert.NotNil(t, logger)
	assert.Equal(t, zap.DebugLevel, logger.log.Core().Enabled(zap.DebugLevel))
}

// Invalid configuration object returns an error
func TestNewLoggerWithInvalidConfiguration(t *testing.T) {
	config := &mockInvalidConfig{}
	logger := NewLogger(config)
	assert.Nil(t, logger)
}

// Large log file size causes rotation
func TestNewLoggerWithLargeLogFileSize(t *testing.T) {
	config := &mockConfig{}
	logger := NewLogger(config)
	assert.NotNil(t, logger)

	// Simulate large log file size
	ll, ok := logger.log.Core().WriteSyncer.(*lumberjack.Logger)
	assert.True(t, ok)
	ll.Rotate()
	assert.Equal(t, 1, ll.MaxBackups)
}
*/
